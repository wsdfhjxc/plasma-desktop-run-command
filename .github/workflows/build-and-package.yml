name: Build and package

on:
  workflow_dispatch:
    inputs:
      ref:
        description: Commit/tag
        required: true
        default: master

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - container: ubuntu-focal
            distr: ubuntu
            release: focal
            pkg: deb
            run: |
              apt-get install -y g++ cmake extra-cmake-modules qtbase5-dev libkf5plasma-dev
              apt-get install -y gcc build-essential ruby ruby-dev rubygems libffi-dev
              gem install --no-document fpm
              ./helper.sh package deb ubuntu-20.04 /usr/lib/x86_64-linux-gnu/qt5

          - container: fedora-33
            distr: fedora
            release: 33
            pkg: rpm
            run: |
              dnf install -y gcc-c++ cmake extra-cmake-modules qt5-qtbase-devel kf5-plasma-devel
              dnf install -y gcc make ruby-devel rubygems rpm-build libffi-devel
              gem install --no-document fpm
              ./helper.sh package rpm fedora-33 /usr/lib64/qt5

          - container: opensuse-tumbleweed
            distr: opensuse
            release: tumbleweed
            pkg: rpm
            run: |
              zypper in -y gcc-c++ cmake extra-cmake-modules libqt5-qtbase-devel plasma-framework-devel
              zypper in -y gcc make ruby-devel rubygems rpm-build libffi-devel
              gem install --no-document fpm
              ln -s /usr/bin/fpm.ruby2.7 /usr/bin/fpm
              ./helper.sh package rpm opensuse-tumbleweed /usr/lib64/qt5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Checkout commit
        run: |
          git fetch --unshallow
          git checkout ${{ github.event.inputs.ref }}
          git checkout master -- helper.sh

      - name: Build and package
        uses: wsdfhjxc/run-in-lxc-action@1.x
        with:
          distr: ${{ matrix.distr }}
          release: ${{ matrix.release }}
          run: ${{ matrix.run }}

      - name: Collect artifact
        id: collect-artifact
        run: |
          assetName=$(ls *.${{ matrix.pkg }} | head -n 1)
          assetPath=$assetName
          echo "::set-output name=assetName::$assetName"
          echo "::set-output name=assetPath::$assetPath"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.collect-artifact.outputs.assetName }}
          path: ${{ steps.collect-artifact.outputs.assetPath }}
